apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: kaboom-celery-worker
  annotations:
    run.googleapis.com/ingress: internal  # ワーカーには内部アクセスのみ
spec:
  template:
    metadata:
      annotations:
        # CloudRun 最適化設定
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/cpu-throttling: "false"
        autoscaling.knative.dev/minScale: "1"  # 常時稼働
        autoscaling.knative.dev/maxScale: "5"  # 最大5インスタンス

        # Celery長時間タスク対応
        run.googleapis.com/timeout: "3600s"

        # VPC接続（Redis接続用）
        run.googleapis.com/vpc-access-connector: projects/kaboom-472705/locations/asia-northeast1/connectors/kaboom-vpc-connector-2

    spec:
      # Celeryワーカー設定
      containerConcurrency: 1  # 1コンテナ1ワーカー
      timeoutSeconds: 3600

      containers:
      - name: kaboom-celery-worker
        image: ${IMAGE}

        # Celeryワーカー + HTTPヘルスチェックサーバー起動
        command: ["python"]
        args:
          - "-m"
          - "app.celery_worker_with_health"

        # リソース制限（Celeryワーカー用に調整）
        resources:
          limits:
            cpu: "2000m"
            memory: "4Gi"
          requests:
            cpu: "1000m"
            memory: "2Gi"

        # 環境変数
        env:
        - name: DEBUG
          value: "false"
        - name: GOOGLE_CLOUD_PROJECT
          value: "kaboom-472705"
        - name: CLOUD_RUN_SERVICE
          value: "kaboom-celery-worker"

        # Celery有効化・他サービス無効化
        - name: DISABLE_REDIS
          value: "false"  # Redis有効化
        - name: DISABLE_WEBSOCKET
          value: "true"   # WebSocket無効化
        - name: DISABLE_CELERY
          value: "false"  # Celery有効化

        # Redis & Celery設定
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-url
              key: latest
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: celery-broker-url
              key: latest
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: celery-result-backend
              key: latest

        # データベース・外部サービス（既存シークレット）
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: supabase-url
              key: latest
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-anon-key
              key: latest
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-url
              key: latest
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: influxdb-token
              key: latest
        - name: INFLUXDB_HOST
          valueFrom:
            secretKeyRef:
              name: influxdb-host
              key: latest
        - name: INFLUXDB_ORG
          valueFrom:
            secretKeyRef:
              name: influxdb-org
              key: latest
        - name: INFLUXDB_BUCKET_RAW_1M_HOT
          valueFrom:
            secretKeyRef:
              name: influxdb-bucket-raw-1m-hot
              key: latest
        - name: INFLUXDB_BUCKET_AGG_5M
          valueFrom:
            secretKeyRef:
              name: influxdb-bucket-agg-5m
              key: latest
        - name: INFLUXDB_BUCKET_AGG_1D
          valueFrom:
            secretKeyRef:
              name: influxdb-bucket-agg-1d
              key: latest
        - name: OPENROUTER_API_KEY
          valueFrom:
            secretKeyRef:
              name: openrouter-api-key
              key: latest
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret-key
              key: latest

        # HTTPヘルスチェック（統合サーバー対応）
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10

        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          periodSeconds: 30
          timeoutSeconds: 5

        # ポート設定
        ports:
        - name: http1
          containerPort: 8080
